package com.glsx.oms.fcwechat.biz.flowcard.controller;

import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.weixin4j.Weixin;
import org.weixin4j.WeixinException;
import org.weixin4j.pay.PayNotifyResult;
import org.weixin4j.pay.PayUtil;
import org.weixin4j.pay.SignUtil;
import org.weixin4j.pay.UnifiedOrder;
import org.weixin4j.pay.UnifiedOrderResult;
import org.weixin4j.pay.WCPay;

import com.glsx.oms.fcwechat.biz.flowcard.model.FlowCard;
import com.glsx.oms.fcwechat.biz.flowcard.model.FlowOrder;
import com.glsx.oms.fcwechat.biz.flowcard.model.PayLog;
import com.glsx.oms.fcwechat.biz.flowcard.model.PkList;
import com.glsx.oms.fcwechat.biz.flowcard.service.PayLogService;
import com.glsx.oms.fcwechat.biz.flowcard.util.HttpUtils;
import com.glsx.oms.fcwechat.biz.flowcard.util.RandomUtil;
import com.glsx.oms.fcwechat.framework.config.PayProperty;
import com.glsx.oms.fcwechat.framework.config.StaticProperty;

@RestController
public class FlowChargeController
{
    private static Logger logger = LoggerFactory.getLogger(FlowChargeController.class);
    
    @Autowired
    private StaticProperty staticProperty;
    
    @Autowired
    private PayProperty payProperty;
    
    @Autowired
    private PayLogService payLogService;
    
    private HttpUtils httpUtils = new HttpUtils();
    
    private FlowOrder flowOrder;
    
    private FlowCard flowCard;
    
    /**
     * 生成订单
     * 
     * @param request
     * @param flowOrder
     * @return
     */
    private WCPay generateWeChatOrder(HttpServletRequest request, FlowOrder flowOrder)
    {
        String openId = (String)request.getSession().getAttribute("openId");
        if (null == openId)
        {
            logger.error("\n \n request.getSession() openId： {}", openId);
            return null;
        }
        
        // 测试使用
        String testOpenId = payProperty.getOpenId();
        if (null != testOpenId)
        {
            openId = testOpenId;
        }
        Weixin weixin = new Weixin();
        WCPay wcPay = null;
        
        UnifiedOrder unifiedorder = new UnifiedOrder();
        unifiedorder.setAppid(payProperty.getAppId());// 公众账号ID
        unifiedorder.setBody(flowOrder.getFlowName());// 商品描述
        unifiedorder.setMch_id(payProperty.getMchId());// 商户号
        unifiedorder.setNonce_str(RandomUtil.createNonceStr());// 随机字符串
        unifiedorder.setNotify_url(payProperty.getNotifyUrl());// 通知地址
        unifiedorder.setOpenid(openId);// 用户标识
        unifiedorder.setOut_trade_no(flowOrder.getOrderNo());// 商户订单号
        unifiedorder.setSpbill_create_ip("183.62.222.180");
        // 标价金额，微信金额单位为分
        Double price = Double.parseDouble(flowOrder.getPrice()) * 100;
        unifiedorder.setTotal_fee(String.valueOf(price.intValue()));
        unifiedorder.setTrade_type("JSAPI");// 标价币种
        
        unifiedorder.setSign(SignUtil.getSign(unifiedorder.toMap(), payProperty.getPaternerKey()));// 签名
        try
        {
            UnifiedOrderResult result = weixin.payUnifiedOrder(unifiedorder);
            JAXBContext context = JAXBContext.newInstance(UnifiedOrderResult.class);
            Marshaller marshaller = context.createMarshaller();
            marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
            Writer w = new StringWriter();
            marshaller.marshal(result, w);
            String xml = w.toString();
            
            logger.info("\n \n 返回结果： {}", xml);
            
            wcPay = PayUtil.getBrandWCPayRequest(payProperty.getAppId(),
                result.getPrepay_id(),
                payProperty.getPaternerKey());
        }
        catch (WeixinException e)
        {
            logger.error("WeixinException {}", e);
        }
        catch (JAXBException e)
        {
            logger.error("JAXBException {}", e);
        }
        return wcPay;
    }
    
    /**
     * 获取套餐的种类
     * 
     * @param session
     * @return
     */
    @RequestMapping(value = "/api/getFlowPkg", method = {RequestMethod.POST, RequestMethod.GET})
    public Map<String, Object> getFlowPkg(HttpSession session)
    {
        flowCard = (FlowCard)session.getAttribute("cardInfo");
        List<PkList> pkList = httpUtils.getValidFlowPkg(flowCard.getIccid(), staticProperty);
        Map<String, Object> myMap = new HashMap<String, Object>();
        myMap.put("pkList", pkList);
        return myMap;
    }
    
    /**
     * 提交流量管理系统订单
     * 
     * @param session
     * @param flowpkgtype
     * @param relation_id
     * @return
     */
    @RequestMapping(value = "/api/commitOrder", method = {RequestMethod.POST, RequestMethod.GET})
    public Map<String, Object> commitOrder(HttpSession session, int flowpkgtype, int relation_id) // flowpkgtype 套餐类型
    {
        flowCard = (FlowCard)session.getAttribute("cardInfo");
        String[] iccid = new String[] {flowCard.getIccid()};
        
        Map<String, Object> myMap = new HashMap<String, Object>();
        int orderfrom = 0;
        FlowOrder flowOrder = httpUtils.submitOrder(iccid, flowpkgtype, relation_id, orderfrom, staticProperty);
        // String orderNo = DateUtils.convertDateToString(new Date(), DateFormatConstants.TIME24FORMATER);
        if (null == flowOrder)
        {
            logger.error("生成订单号为空 submitOrder {}", flowOrder);
            myMap.put("flowOrder", flowOrder);
            return myMap;
        }
        
        if (null != payProperty.getPrice())
        {
            flowOrder.setPrice(payProperty.getPrice());
            logger.error("配置项取订单价格  price {}", payProperty.getPrice());
        }
        else
        {
            logger.error("生成订单价格  price {}", flowOrder.getPrice());
        }
        
        session.setAttribute("flowOrder", flowOrder);
        myMap.put("flowOrder", flowOrder);
        return myMap;
    }
    
    /**
     * 处理生成微信订单
     * 
     * @param request
     * @param session
     * @return
     */
    @RequestMapping(value = "/api/processOrder", method = {RequestMethod.POST, RequestMethod.GET})
    public Map<String, Object> processOrder(HttpServletRequest request, HttpSession session)
    {
        Map<String, Object> myMap = new HashMap<String, Object>();
        flowOrder = (FlowOrder)session.getAttribute("flowOrder");
        if (null == flowOrder)
        {
            myMap.put("order_no", flowOrder.getOrderNo());
            return myMap;
        }
        WCPay wcPay = generateWeChatOrder(request, flowOrder);
        if (null != wcPay && !"prepay_id=null".equals(wcPay.getPackage()))
        {
            int start = wcPay.getPackage().indexOf("=") + 1;
            session.setAttribute("prepayId", wcPay.getPackage().substring(start, wcPay.getPackage().length()));
            myMap.put("order_no", flowOrder.getOrderNo());
            myMap.put("wcPay", wcPay);
        }
        else
        {
            myMap.put("order_no", null);
        }
        return myMap;
    }
    
    /**
     * 微信支付成功上报回调接口
     * 
     * @param body
     */
    @RequestMapping(value = "/api/payNotify", method = {RequestMethod.POST, RequestMethod.GET})
    public String payNotify(@RequestBody String body)
    {
        logger.info("微信支付回调返回...{}", body);
        
        PayLog payLog = new PayLog();
        payLog.setContent(body);
       
        
        try
        {
            JAXBContext context = JAXBContext.newInstance(PayNotifyResult.class);
            
            Unmarshaller unmarshaller = context.createUnmarshaller();
            PayNotifyResult result = (PayNotifyResult)unmarshaller.unmarshal(new StringReader(body));
            
            // 支付完成后执行订单
            String content = "微信支付";
            if ("SUCCESS".equals(result.getResult_code()) && "SUCCESS".equals(result.getReturn_code()))
            {
                payLog.setStatus(1);
                payLog.setProcessRet(1);
                httpUtils.processOrder(result.getOut_trade_no(), result.getTransaction_id(), content, staticProperty);
                logger.info("修改订单状态,支付成功...{}", body);
            }
            else
            {
                payLog.setStatus(0);
                logger.info("修改订单状态,支付失败...{}", body);
            }
            
        }
        catch (JAXBException e)
        {
            payLog.setProcessRet(0);
            logger.info("微信支付回调返回...{}", e);
        }
        payLogService.insertLog(payLog);
        String msg ="<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>";
        return msg;
    }
    
}
